//#include <iostream>
//#include <string>
//#include <list>
//
//using namespace std;

//class Man
//{
//private:
//	string name;
//	string surename;
//	int age;
//public:
//	Man()
//	{
//		name = "X";
//		surename = "X";
//		age = 0;
//	}
//	 Man(const Man &obj)
//	{
//		this->name = obj.name;
//		this->surename = obj.surename;
//		this->age = obj.age;
//	}
//	virtual ~Man() = 0;
//	
//
//	virtual void setName(string name)
//	{
//		this->name = name;
//	}
//	virtual void setAge(int age)
//	{
//		this->age = age;
//	}
//	virtual void setSurename(string surename)
//	{
//		this->surename = surename;
//	}
//
//	virtual string getName()
//	{
//		return name;
//	}
//	virtual int getAge()
//	{
//		return age;
//	}
//	virtual string getSurename()
//	{
//		return surename;
//	}
//
//	virtual void PrintMan()
//	{
//		cout << "Name : " << name << endl;
//		cout << "Surename : " << surename << endl;
//		cout << "Age : " << age << endl;
//	}
//};
//
//	
//class Manager :public Man
//{
//private:
//	string project;
//	float salary;
//public:
//	Manager()
//	{
//		project = "X";
//		salary = 0;
//	}
//	Manager(Manager &obj)
//	{
//		project = obj.project;
//		salary = obj.salary;
//	}
//
//	void setProject(string project)
//	{
//		this->project = project;
//	}
//	void setSalary(float salary)
//	{
//		this->salary = salary;
//	}
//
//
//	float getSalary()
//	{
//		return salary;
//	}
//	string getProject()
//	{
//		return project;
//	}
//
//	void printManager()
//	{
//		PrintMan();
//		cout << "Project : " << project << endl;
//		cout << "Salary : " << salary << "$" << endl;
//	}
//};
//
//
//struct Elem
//{
//	Man *data;
//	Elem *next, *prev;
//};
//
//class Li {
//private:
//	Elem *head;
//	Elem *tail;
//public:
//	Li()
//	{
//		head = tail = nullptr;
//	}
//
//	 add next elem
//	void AddElement(Man Element)
//	{
//		Elem *add = new Elem;
//		add->data = &Element;
//
//		if (head == nullptr)
//		{
//			head = tail = add;
//			add->next = add->prev = nullptr;
//		}
//		else
//		{
//			tail->next = add;
//			add->prev = tail;
//			add->next = nullptr;
//			tail = add;
//		}
//	}
//
//	 Pop element
//	Man *PopHead()
//	{
//		Man *tmp = head->data;
//
//		head->next = head;
//		head->prev = nullptr;
//
//		return tmp;
//	}
//
//	 Prin all trash
//	void PrintAll()
//	{
//		Elem *tmp = head;
//		while (tmp != nullptr)
//		{
//			tmp->data->PrintMan();
//			tmp = tmp->next;
//		}
//	}
//
//};
//
//
//typedef list<Man> ourList;
//void ShowList(ourList& l1)
//{
//	Создаем итератор. 
//	ourList::iterator iter;
//	cout << "list1: \n";
//	for (iter = l1.begin(); iter != l1.end(); iter++)
//	{
//		выводим элемент на который указывает итератор 
//		iter->PrintMan();
//	}
//}
//int main()
//{
//	ourList Lis;
//	Manager Denis;
//	
//
//	Man **arr = new Man *[2];
//	arr[0] = &Denis;
//	
//
//
//	cout << "Manager===============\n";
//	Denis.setAge(18);
//	Denis.setSalary(1000.99);
//	Denis.setProject("34PR31");
//	Denis.setSurename("Lisostep");
//	Denis.setName("Denis");
//	Denis.printManager();
//
//	cout << "======================" << endl << endl;
//	
//	ourList people;
//	people.push_front(Denis);
//	ShowList(people);
//	cout << "======================" << endl << endl;
//	
//
//	
//





	//

//#include <iostream>
//#include <map>
//#include <vector>
//using namespace std;
//void main()
//
//{
//	//создаем отображение
//	map <int, int> our_map;
//	//создаем вектор
//	vector <int> our_vector;
//	//максимальный размер вектора
//	cout << "\n\nmax size of vector --> "
//		<< our_vector.max_size() /sizeof(int);
//	//максимальный размер отображения
//	//(в два раза меньше т.к. для каждого элемента
//	//нужно хранить два значения - пару).
//	cout << "\n\nmax size of map --> "
//		<< our_map.max_size() / sizeof(int);
//	cout << "\n\n-------------------------------\n";
//	int val;
//	int key;
//	cout << "\nInput value : ";
//	cin >> val;
//	cout << "\nInput key : ";
//	cin >> key;
//	//создаем пару на основании двух значений.
//	pair<int, int> element(key, val);
//	//вставляем пару в отображение
//	our_map.insert(element);
//	//кол-во элементов в отображении
//	cout << "\nCurrent element of map --> "
//		<< our_map.size() << endl;
//	cout << "\n\n-------------------------------\n";
//
//	cout << "\nInput value : ";
//	cin >> val;
//	cout << "\nInput key : ";
//	cin >> key;
//	pair<map<int, int>::iterator, bool>
//		err = our_map.insert(make_pair(key, val));
//	if (err.second == false)
//	{
//		//отработает в случае если в отображение
//		//не получилось добавить элемент
//		//например если в отображении уже был
//		//элемент с данным ключом.
//		cout << "\nError !!!\n";
//	}
//	//кол-во элементов в отображении
//	cout << "\nCurrent element of map --> "
//		<< our_map.size() << endl;
//	//вывод всех элементов на экран
//	map<int, int>::iterator iter = our_map.begin();
//	for (; iter != our_map.end(); iter++)
//	{
//
//		cout << "\nKey --> " << iter->first
//			<< "\t\tValue --> " << iter->second;
//	}
//	cout << "\n---------------------------------\n";


#include <vector>
#include <iostream>
#include <iomanip>
using namespace std;


int main()
{

	/*Заполнить вектор длинной 10 квадратами целых чисел
		и вывести его в выходной поток.*/

	/*const int n = 10;
	vector<int> a(n);

	for (vector<int>::size_type i = 0; i != a.size(); ++i)
	{
		a[i] = i*i;
		cout << a[i] << " ";
	}*/

	/*Заполнить двухмерный вектор таблицей умножения
		и выввести его в выходной поток.*/
		int n = 10;
		vector< vector <int> > a(n);
		int i, j;

		for (i = 0; i < n; i++) a[i].resize(n);


		for (i = 1; i < n; i++)
			for (j = 1; j < n; j++)
				a[i][j] = i * j;

		for (i = 1; i < n; i++)
		{
			for (int j = 1; j < n; j++)
				cout << setw(3) << a[i][j];

			cout << endl;
		}
	
	

	
		
	system("pause");
	return 0;
}